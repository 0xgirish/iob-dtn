// Package packet provides implementation of packaet for the buffer in a sensor
package packet

import (
	"errors"
	"fmt"
	"time"
)

const PACKET_COPIES_ERROR = errors.New("PACKET_COPIES_ERROR")

// Packet is generated by the sensor and stored in the buffer
type Packet struct {
	copies    int
	timestamp time.Time
	parent_id int
}

// NewPacket generation through the sensor
func NewPacket(parent_id, number_of_copies int) Packet {
	return Packet{
		copies:    number_of_copies,
		parent_id: parent_id,
		timestamp: time.Now(),
	}
}

// DecreseCopies after getting ACK from the reciever with n_prime
func (p *Packet) DecreseCopies(n_prime int) error {
	if p.copies > n_prime {
		p.copies -= n_prime
		return nil
	}
	return fmt.Errorf("[%w] n_prime should be smaller then packet copies", PACKET_COPIES_ERROR)
}

// Deliverable checks if the packet can further be sent to other bicycles
func (p Packet) Deliverable() bool {
	return p.copies > 1
}

// SetCopies of the packet in the buffer
func (p *Packet) SetCopies(n int) error {
	if n > 0 {
		p.copies = n
		return nil
	}
	return fmt.Errorf("[%w] number of copies should be positive", PACKET_COPIES_ERROR)
}

// GetTimestamp of creation of the packet
func (p Packet) GetTimestamp() time.Time {
	return p.timestamp
}

// GetParentId of the packet, the sensor which generated the packet
func (p Packet) GetParentId() int {
	return p.parent_id
}
